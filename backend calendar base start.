// Import necessary modules
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const cors = require('cors');

// Initialize the app
const app = express();

// Middleware setup
app.use(bodyParser.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb://localhost:0000/calendarApp', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// Define a schema for calendar events
const eventSchema = new mongoose.Schema({
    title: String,
    description: String,
    date: Date,
    time: String,
});

// Create a model for calendar events
const Event = mongoose.model('Event', eventSchema);

// Route to get all events
app.get('/events', async (req, res) => {
    try {
        const events = await Event.find();
        res.json(events);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Route to create a new event
app.post('/events', async (req, res) => {
    const event = new Event({
        title: req.body.title,
        description: req.body.description,
        date: req.body.date,
        time: req.body.time,
    });

    try {
        const newEvent = await event.save();
        res.status(201).json(newEvent);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Route to update an event
app.put('/events/:id', async (req, res) => {
    try {
        const event = await Event.findById(req.params.id);
        if (!event) {
            return res.status(404).json({ message: 'Event not found' });
        }

        event.title = req.body.title;
        event.description = req.body.description;
        event.date = req.body.date;
        event.time = req.body.time;

        const updatedEvent = await event.save();
        res.json(updatedEvent);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Route to delete an event
app.delete('/events/:id', async (req, res) => {
    try {
        const event = await Event.findById(req.params.id);
        if (!event) {
            return res.status(404).json({ message: 'Event not found' });
        }

        await event.remove();
        res.json({ message: 'Event deleted' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
// Define a schema for users
const userSchema = new mongoose.Schema({
    name: String,
    email: String,
    attendedEvents: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Event' }],
});

// Create a model for users
const User = mongoose.model('User', userSchema);

// Route to mark a user as attending an event
app.post('/users/:userId/attend/:eventId', async (req, res) => {
    try {
        const user = await User.findById(req.params.userId);
        const event = await Event.findById(req.params.eventId);

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        if (!event) {
            return res.status(404).json({ message: 'Event not found' });
        }

        // Add the event to the user's attendedEvents array if not already added
        if (!user.attendedEvents.includes(event._id)) {
            user.attendedEvents.push(event._id);
            await user.save();
        }

        res.json({ message: 'Event marked as attended', user });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Route to get all events a user has attended
app.get('/users/:userId/attended-events', async (req, res) => {
    try {
        const user = await User.findById(req.params.userId).populate('attendedEvents');

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        res.json(user.attendedEvents);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});
